---
version: '3'

vars:
  VOLSYNC_RESOURCES_DIR: '{{ .ROOT_DIR }}/.taskfiles/volsync/resources'

tasks:
  state-*:
    desc: Suspend or resume volsync operations
    cmds:
      - flux --namespace volsync-system {{.STATE}} kustomization volsync
      - flux --namespace volsync-system {{.STATE}} helmrelease volsync
      - kubectl --namespace volsync-system scale deployment volsync --replicas {{if eq .STATE "suspend"}}0{{else}}1{{end}}
    vars:
      STATE: '{{index .MATCH 0}}'
    env:
      KUBECONFIG: "{{ .KUBERNETES_DIR }}/kubeconfig"
    preconditions:
      - which flux kubectl
      - '[[ "{{.STATE}}" == "suspend" || "{{.STATE}}" == "resume" ]]'

  snapshot:
    desc: Create a snapshot [NS={{.NS}}] [APP=required]
    cmds:
      - kubectl --namespace {{.NS}} patch replicationsources/{{.APP}} --type merge -p '{"spec":{"trigger":{"manual":"{{now | unixEpoch}}"}}}'
      - until kubectl --namespace {{.NS}} get job/{{.JOB}} &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for=condition=complete --timeout=120m
    vars:
      NS: '{{.NS | default "default"}}'
      JOB: volsync-src-{{.APP}}
    env:
      KUBECONFIG: "{{ .KUBERNETES_DIR }}/kubeconfig"
    requires:
      vars:
        - APP
    preconditions:
      - which kubectl
      - kubectl --namespace {{.NS}} get replicationsources {{.APP}}

  restore:
    desc: Restore a snapshot [NS={{.NS}}] [APP=required] [PREVIOUS=required]
    cmds:
      # Suspend the app
      - flux --namespace {{.NS}} suspend kustomization {{.APP}}
      - flux --namespace {{.NS}} suspend helmrelease {{.APP}}
      - kubectl --namespace {{.NS}} scale {{.CONTROLLER}}/{{.APP}} --replicas 0
      - kubectl --namespace {{.NS}} wait pod --for=delete --selector="app.kubernetes.io/name={{.APP}}" --timeout=5m

      # Restore the snapshot
      - minijinja-cli --config-file {{ .ROOT_DIR }}/.minijinja.toml {{.VOLSYNC_RESOURCES_DIR}}/replicationdestination.yaml.j2 | kubectl apply --server-side --filename -
      - until kubectl --namespace {{.NS}} get job/volsync-dst-{{.APP}}-manual &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.NS}} wait job/volsync-dst-{{.APP}}-manual --for=condition=complete --timeout=120m
      - kubectl --namespace {{.NS}} delete replicationdestination {{.APP}}-manual

      # Resume the app
      - flux --namespace {{.NS}} resume kustomization {{.APP}}
      - flux --namespace {{.NS}} resume helmrelease {{.APP}}
      - flux --namespace {{.NS}} reconcile helmrelease {{.APP}} --force
      - kubectl --namespace {{.NS}} wait pod --for=condition=ready --selector="app.kubernetes.io/name={{.APP}}" --timeout=5m
    vars:
      NS: '{{.NS | default "default"}}'
      CONTROLLER:
        sh: kubectl --namespace {{.NS}} get deployment {{.APP}} &>/dev/null && echo deployment || echo statefulset
    env:
      NS: '{{.NS}}'
      APP: '{{.APP}}'
      PREVIOUS: '{{.PREVIOUS}}'
      CLAIM:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.sourcePVC}'
      ACCESS_MODES:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.accessModes}'
      STORAGE_CLASS_NAME:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.storageClassName}'
      PUID:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.moverSecurityContext.runAsUser}'
      PGID:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.moverSecurityContext.runAsGroup}'
      KUBECONFIG: "{{ .KUBERNETES_DIR }}/kubeconfig"
    requires:
      vars:
        - APP
        - PREVIOUS
    preconditions:
      - which flux kubectl minijinja-cli
      - kubectl --namespace {{.NS}} get replicationsources {{.APP}}
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/replicationdestination.yaml.j2
